// Generated by CoffeeScript 1.10.0
(function() {
  var React, _, common, dom,
    slice = [].slice;

  _ = require('lodash');

  React = require('react');

  dom = React.DOM;

  common = require('./common');

  exports.HtmlListView = common.createFactory({
    componentDidMount: function() {
      this.setState({
        size: this.getContainerBoundingRect()
      });
      this.setState({
        scrollTop: 0
      });
      this.forceUpdate();
      $(window).on("resize", this.handleWindowResize);
      return $(window).on("scroll", this.handleWindowScroll);
    },
    componentWillUnmount: function() {
      $(window).off("resize", this.handleWindowResize);
      return $(window).off("scroll", this.handleWindowScroll);
    },
    componentDidUpdate: function() {
      var ref;
      if (((ref = this.state) != null ? ref.size : void 0) == null) {
        this.setState({
          size: this.getContainerBoundingRect()
        });
        return this.forceUpdate();
      }
    },
    handleWindowScroll: function(e) {
      this.setState({
        scrollTop: $(window).scrollTop()
      });
      return this.forceUpdate();
    },
    handleWindowResize: function() {
      this.setState({
        size: null
      });
      return this.forceUpdate();
    },
    render: function() {
      var containerStyle, contentHeight, emptyContainer, endIndex, i, itemCount, itemHeight, offsetTop, ref, ref1, results, scrollTop, size, startIndex;
      containerStyle = _.merge({
        position: 'relative'
      }, this.props.style);
      if (((ref = this.state) != null ? ref.size : void 0) == null) {
        emptyContainer = dom.div({
          id: this.props.id,
          ref: 'container',
          className: this.props.className,
          style: {
            position: 'relative',
            height: '100%'
          }
        }, dom.div({
          ref: 'listView'
        }));
        return emptyContainer;
      }
      itemHeight = this.calculateItemHeight();
      itemCount = this.calculateNumberOfItems();
      contentHeight = itemCount * itemHeight;
      scrollTop = this.state.scrollTop;
      startIndex = Math.max(~~(scrollTop / itemHeight), 0);
      offsetTop = startIndex * itemHeight;
      size = this.state.size;
      endIndex = startIndex + ~~((size.height + scrollTop % itemHeight) / itemHeight);
      return dom.div({
        id: this.props.id,
        ref: 'container',
        className: this.props.className,
        style: containerStyle
      }, dom.div.apply(dom, [{
        ref: 'listView',
        style: {
          paddingTop: offsetTop + "px",
          height: contentHeight + "px"
        }
      }].concat(slice.call(_.map((function() {
        results = [];
        for (var i = startIndex, ref1 = Math.min(endIndex, itemCount - 1); startIndex <= ref1 ? i <= ref1 : i >= ref1; startIndex <= ref1 ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this), (function(_this) {
        return function(itemIndex) {
          return _this.renderItem(itemIndex, scrollTop);
        };
      })(this))))));
    },
    renderItem: function(itemIndex) {
      return this.props.itemGetter(itemIndex);
    },
    calculateItemHeight: function() {
      if (this.__cachedItemHeight != null) {
        return this.__cachedItemHeight;
      }
      return this.__cachedItemHeight = this.props.itemHeightGetter();
    },
    calculateNumberOfItems: function() {
      return this.props.numberOfItemsGetter();
    },
    getContainerBoundingRect: function() {
      return this.refs.container.getDOMNode().getBoundingClientRect();
    }
  });

}).call(this);

//# sourceMappingURL=containers.js.map
